{"version":3,"sources":["components/Header.js","utils/ModalFunctions.js","components/CategoryListModal.js","components/Search.js","components/Question.js","utils/UtilityFunctions.js","components/QuestionSection.js","components/ResetSessionModal.js","components/Footer.js","App.js","index.js"],"names":["Header","className","size","color","OpenModal","e","id","preventDefault","modal","document","querySelector","html","classList","add","CloseModal","remove","CategoryListModal","categoryNames","onClick","map","cat","key","value","validateCategory","Search","player","setPlayer","categories","setQuery","setErrorMessage","getErrorMessage","categoryKeys","Object","keys","c","name","sort","useState","number","setNumber","category","setCategory","difficulty","setDifficulty","format","setFormat","handleFocus","target","select","onSubmit","query","keywords","searchTerms","tempQuery","i","length","getQuery","htmlFor","type","onChange","onBlur","trim","onFocus","placeholder","min","max","required","validCategoryId","validCategory","Question","multipleAnswers","text","q","setAnswered","setScore","completedQuestions","correct_answer","incorrect_answers","question","validateChoice","score","array","newArray","slice","randomIndex","Math","floor","random","splice","AddValueToArrayAtRandomIndex","useEffect","dangerouslySetInnerHTML","__html","answer","Questions","questions","setQuestions","setCompletedQuestions","answered","previouslyCompletedQuestions","ResetSessionModal","resetSessionToken","window","confirm","Footer","href","rel","App","sessionToken","setSessionToken","setCategories","errorMessage","getNewSessionToken","fetch","then","response","json","result","response_code","token","responseCode","trivia_categories","encodeURL","encodeURI","disabled","results","rootElement","getElementById","ReactDOM","render"],"mappings":"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","file":"static/js/main.5d51b640.chunk.js","sourcesContent":["import { BsFillPatchQuestionFill } from \"react-icons/bs\";\n\nexport default function Header() {\n  return (\n    <>\n      <header className=\"has-text-centered\">\n        <div className=\"is-flex is-align-items-center is-justify-content-center\">\n        <BsFillPatchQuestionFill className=\"mr-2\" size=\"3rem\" color=\"#363636\" />\n          <h1 className=\"title is-1\">Hello, Trivia</h1>\n        </div>\n        <p className=\"subtitle\">Do You Want to Play a Game?</p>\n      </header>\n    </>\n  );\n}\n","// Handles the Modal functions\n\n// Opens the modal window, displays the category list\n// and disables scrolling on the page.\nexport function OpenModal(e, id) {\n  e.preventDefault();\n\n  const modal = document.querySelector(\"#\" + id);\n  const html = document.querySelector(\"html\");\n  modal.classList.add(\"is-active\");\n  html.classList.add(\"is-clipped\");\n}\n\n// Closes the categoryList modal window and sets the\n// classNames back to their initial states.\nexport function CloseModal(e, id) {\n  e.preventDefault();\n\n  const modal = document.querySelector(\"#\" + id);\n  const html = document.querySelector(\"html\");\n  modal.classList.remove(\"is-active\");\n  html.classList.remove(\"is-clipped\");\n}\n","import { CloseModal } from \"../utils/ModalFunctions\";\n\nexport default function CategoryListModal({categoryNames}) {\n    return (\n        <div id=\"categoryList\" className=\"modal\">\n        <div\n          className=\"modal-background\"\n          onClick={(e) => CloseModal(e, \"categoryList\")}\n        ></div>\n        <div className=\"modal-content box\">\n          <h3 className=\"title\">Categories</h3>\n          <ul>\n            {categoryNames.map((cat, key) => (\n              <li key={key}>\n                <button\n                  className=\"buttonLooksLikeLink\"\n                  onClick={(e) => {\n                    const input = document.querySelector(\"#category\");\n                    input.value = cat;\n                    validateCategory();\n                    CloseModal(e, \"categoryList\");\n                  }}\n                >\n                  {cat}\n                </button>\n              </li>\n            ))}\n          </ul>\n        </div>\n        <button\n          className=\"button modal-close\"\n          aria-label=\"close\"\n          onClick={(e) => CloseModal(e, \"categoryList\")}\n        ></button>\n      </div>\n    );\n}","import React, { useState } from \"react\";\nimport { AiOutlineInfoCircle } from \"react-icons/ai\";\nimport CategoryListModal from \"./CategoryListModal\";\nimport { OpenModal } from \"../utils/ModalFunctions\";\n\nexport default function Search({\n  player,\n  setPlayer,\n  categories,\n  setQuery,\n  setErrorMessage,\n  getErrorMessage\n}) {\n  const categoryKeys = Object.keys(categories);\n  const categoryNames = categoryKeys.map((c) => categories[c].name).sort();\n  const [number, setNumber] = useState(\"\");\n  const [category, setCategory] = useState(\"\");\n  const [difficulty, setDifficulty] = useState(\"\");\n  const [format, setFormat] = useState(\"\");\n\n  // Handles the onFocus event of the form inputs.\n  function handleFocus(e) {\n    e.target.select();\n  }\n\n  function validateCategory() {\n    // Bit of a hacky solution to include search functionality.\n    // A select would work better frankly, but I don't want to lose marks.\n\n    // Get all of the keys from the categories.\n    const value = document.querySelector(\"#category\").value;\n    let validCategory = false;\n    let validCategoryId;\n\n    // Check if the input value exists within the categories fetched from the api.\n    for (const key of categoryKeys) {\n      if (value === categories[key].name) {\n        validCategoryId = categories[key].id;\n        validCategory = true;\n        break;\n      }\n    }\n\n    if (validCategory) {\n      setCategory(validCategoryId);\n      setErrorMessage(\"\");\n    } else setErrorMessage(getErrorMessage(2));\n  }\n\n  // Handles the onChange event of the form number input.\n  function handleChange(e) {\n    setErrorMessage(\"\");\n\n    if (e.target.name === \"numOfQuestions\") {\n      setNumber(e.target.value);\n    }\n  }\n\n  // Handles the submit event.\n  function handleSubmit(e) {\n    e.preventDefault();\n\n    const query = getQuery();\n\n    // Sets the query to the values from the form.\n    // Updating the query state triggers useEffect,\n    // which fetches the data.\n    setQuery(query);\n  }\n\n  // Gets the API query based on the inputs from the form.\n  function getQuery() {\n    const keywords = [\"amount=\", \"category=\", \"difficulty=\", \"type=\"];\n    const searchTerms = [number, category, difficulty, format];\n    let tempQuery = \"\";\n\n    // Iterates over each search term to match it the correct search keyword.\n    for (let i = 0; i < searchTerms.length; i++) {\n      if (searchTerms[i] === null || searchTerms[i] === \"\") {\n        continue;\n      } else if (searchTerms[i] !== null || searchTerms[i] !== \"\") {\n        if (i === 0) {\n          tempQuery += keywords[i] + searchTerms[i];\n        } else {\n          tempQuery += \"&\" + keywords[i] + searchTerms[i];\n        }\n      }\n    }\n\n    return tempQuery;\n  }\n\n  return (\n    <div className=\"box container has-text-centered\">\n      <p className=\"subtitle\">Hello {player}</p>\n      <h2 className=\"title\">Set up your game</h2>\n\n      <form className=\"form\" onSubmit={handleSubmit}>\n        <div className=\"field is-horizontal is-align-items-center\">\n          <div className=\"field-label\">\n            <label className=\"label\" htmlFor=\"playerName\">\n              Type your Name\n            </label>\n          </div>\n          <div className=\"field-body\">\n            <div className=\"field\">\n              <input\n                className=\"input\"\n                type=\"text\"\n                name=\"playerName\"\n                value={player}\n                onChange={(e) => setPlayer(e.target.value)}\n                onBlur={(e) => {\n                  if (e.target.value.trim() === \"\") setPlayer(\"Player\");\n                }}\n                onFocus={handleFocus}\n                placeholder=\"Enter Your Name\"\n              ></input>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"field is-horizontal is-align-items-center\">\n          <div className=\"field-label\">\n            <label className=\"label\" htmlFor=\"numOfQuestions\">\n              Number of Questions?\n            </label>\n          </div>\n          <div className=\"field-body\">\n            <div className=\"field\">\n              <input\n                className=\"input\"\n                type=\"number\"\n                name=\"numOfQuestions\"\n                id=\"numOfQuestions\"\n                min=\"1\"\n                max=\"50\"\n                placeholder=\"1-50\"\n                required\n                onChange={handleChange}\n              ></input>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"field is-horizontal\">\n          <div className=\"field-label is-normal\">\n            <label className=\"label\">Category</label>\n          </div>\n          <div className=\"field-body\">\n            <div className=\"field\">\n              <div className=\"control\">\n                <input\n                  className=\"input\"\n                  type=\"text\"\n                  id=\"category\"\n                  name=\"category\"\n                  onFocus={handleFocus}\n                  onChange={validateCategory}\n                  placeholder=\"Search for a Category\"\n                  required\n                ></input>\n              </div>\n              <p className=\"help is-flex is-align-items-center\">\n                <AiOutlineInfoCircle />\n                &nbsp;\n                <button\n                  className=\"buttonLooksLikeLink\"\n                  onClick={(e) => OpenModal(e, \"categoryList\")}\n                >\n                  Hint: Category List\n                </button>\n              </p>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"field is-horizontal\">\n          <div className=\"field-label\">\n            <label className=\"label\">Difficulty</label>\n          </div>\n          <div className=\"field-body has-text-left\">\n            <div className=\"field\">\n              <label className=\"control\" htmlFor=\"anyDifficulty\">\n                <input\n                  className=\"mr-1\"\n                  type=\"radio\"\n                  name=\"difficulty\"\n                  id=\"anyDifficulty\"\n                  value=\"\"\n                  onChange={(e) => {\n                    setDifficulty(e.target.value);\n                    setErrorMessage(\"\");\n                  }}\n                  required\n                ></input>\n                Any Difficulty\n              </label>\n            </div>\n            <div className=\"field\">\n              <label className=\"control\" htmlFor=\"easy\">\n                <input\n                  className=\"mr-1\"\n                  type=\"radio\"\n                  name=\"difficulty\"\n                  id=\"easy\"\n                  value=\"easy\"\n                  onChange={(e) => {\n                    setDifficulty(e.target.value);\n                    setErrorMessage(\"\");\n                  }}\n                  required\n                ></input>\n                Easy\n              </label>\n            </div>\n            <div className=\"field\">\n              <label className=\"control\" htmlFor=\"medium\">\n                <input\n                  className=\"mr-1\"\n                  type=\"radio\"\n                  name=\"difficulty\"\n                  id=\"medium\"\n                  value=\"medium\"\n                  onChange={(e) => {\n                    setDifficulty(e.target.value);\n                    setErrorMessage(\"\");\n                  }}\n                  required\n                ></input>\n                Medium\n              </label>\n            </div>\n            <div className=\"field\">\n              <label className=\"control\" htmlFor=\"hard\">\n                <input\n                  className=\"mr-1\"\n                  type=\"radio\"\n                  name=\"difficulty\"\n                  id=\"hard\"\n                  value=\"hard\"\n                  onChange={(e) => {\n                    setDifficulty(e.target.value);\n                    setErrorMessage(\"\");\n                  }}\n                  required\n                ></input>\n                Hard\n              </label>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"field is-horizontal\">\n          <div className=\"field-label\">\n            <label className=\"label\">Format</label>\n          </div>\n          <div className=\"field-body has-text-left\">\n            <div className=\"field\">\n              <label className=\"control\" htmlFor=\"anyType\">\n                <input\n                  className=\"mr-1\"\n                  type=\"radio\"\n                  name=\"format\"\n                  id=\"anyType\"\n                  value=\"\"\n                  onChange={(e) => {\n                    setFormat(e.target.value);\n                    setErrorMessage(\"\");\n                  }}\n                  required\n                ></input>\n                Any Type\n              </label>\n            </div>\n            <div className=\"field\">\n              <label className=\"control\" htmlFor=\"multipleChoice\">\n                <input\n                  className=\"mr-1\"\n                  type=\"radio\"\n                  name=\"format\"\n                  id=\"multipleChoice\"\n                  value=\"multiple\"\n                  onChange={(e) => {\n                    setFormat(e.target.value);\n                    setErrorMessage(\"\");\n                  }}\n                  required\n                ></input>\n                Multiple Choice\n              </label>\n            </div>\n            <div className=\"field\">\n              <label className=\"control\" htmlFor=\"trueFalse\">\n                <input\n                  className=\"mr-1\"\n                  type=\"radio\"\n                  name=\"format\"\n                  id=\"trueFalse\"\n                  value=\"boolean\"\n                  onChange={(e) => {\n                    setFormat(e.target.value);\n                    setErrorMessage(\"\");\n                  }}\n                  required\n                ></input>\n                True/False\n              </label>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"control\">\n          <input className=\"button\" id=\"submit\" type=\"submit\"></input>\n        </div>\n      </form>\n\n      <CategoryListModal categoryNames={categoryNames}/>\n    </div>\n  );\n}\n","import React, { useEffect } from \"react\";\nimport {\n  AddValueToArrayAtRandomIndex,\n  RenderHTML,\n  CreateMarkup\n} from \"../utils/UtilityFunctions\";\n\nexport default function Question({\n  q,\n  setAnswered,\n  setScore,\n  completedQuestions\n}) {\n  const {\n    category,\n    correct_answer,\n    difficulty,\n    incorrect_answers,\n    question,\n    type\n  } = q;\n\n  // Creates a new array with the correct and incorrect answers.\n  // Correct answer is randomly placed within the new array.\n  let multipleAnswers;\n\n  if (type === \"multiple\") {\n    multipleAnswers = AddValueToArrayAtRandomIndex(\n      incorrect_answers,\n      correct_answer\n    );\n  }\n\n  // Validates the user's choice and updates the answered state.\n  function validateChoice(e) {\n    e.preventDefault();\n\n    const target = e.target;\n    if (target.value === correct_answer) setScore((score) => score + 1);\n    setAnswered(true);\n  }\n\n  // Creates True or False buttons or radio buttons,\n  //depending on the question format.\n  function setQuestionControls() {\n    if (type === \"boolean\") {\n      return (\n        <div className=\"field is-grouped-centered is-flex is-align-items-center is-justify-content-center\">\n          <button\n            className=\"button has-background-light is-medium\"\n            name=\"True\"\n            id=\"True\"\n            value=\"True\"\n            onClick={validateChoice}\n          >\n            True\n          </button>\n          <span className=\"mx-3\">OR</span>\n          <button\n            className=\"button has-background-light is-medium\"\n            name=\"False\"\n            id=\"False\"\n            value=\"False\"\n            onClick={validateChoice}\n          >\n            False\n          </button>\n        </div>\n      );\n    } else if (type === \"multiple\") {\n      return (\n        <div className=\"buttons is-centered\">\n          {multipleAnswers.map((answer, key) => (\n            <button\n              className=\"button has-background-light is-medium\"\n              name=\"answers\"\n              key={key}\n              value={answer}\n              onClick={validateChoice}\n              required\n              dangerouslySetInnerHTML={CreateMarkup(answer)}\n            ></button>\n          ))}\n        </div>\n      );\n    }\n  }\n\n  useEffect(() => {\n    // Sets answered to false after each new question is rendered.\n    setAnswered(false);\n  }, [q]);\n\n  return (\n    <div className=\"card\">\n      <div className=\"card-content has-text-centered\">\n        <p className=\"subtitle\">Question {completedQuestions + 1}</p>\n        <p className=\"title is-3\">{RenderHTML(question)}</p>\n        <form>{setQuestionControls()}</form>\n      </div>\n      <div className=\"card-footer\">\n        <p className=\"card-footer-item has-text-white has-background-success\">\n          Category | {category}\n        </p>\n        <p className=\"card-footer-item has-text-white has-background-info\">\n          Difficulty | {difficulty}\n        </p>\n      </div>\n    </div>\n  );\n}\n","// As the name semi describes...\n// Copies an array, adds a new value added at a random index,\n// and returns the new array.\nexport function AddValueToArrayAtRandomIndex(array, value) {\n  // Copy the old array into a new array.\n  let newArray = array.slice();\n  let min = 0;\n  let max = array.length + 1;\n\n  // Get a random number ranging from 0 to (the newArray length + 1).\n  // Use as index for new value.\n  let randomIndex = Math.floor(Math.random() * (max - min + 1) + min);\n\n  // Add the new value to the randomly chosen index.\n  newArray.splice(randomIndex, 0, value);\n\n  return newArray;\n}\n\n// Renders a string containing HTML tags with the correct markup in a span tag.\nexport function RenderHTML(text) {\n  return <span dangerouslySetInnerHTML={{ __html: text }}></span>;\n}\n\nexport function CreateMarkup(text) {\n  return { __html: text };\n}\n","import { useEffect, useState } from \"react\";\nimport Question from \"./Question\";\nimport { BiArrowBack, BiTrophy, BiGhost } from \"react-icons/bi\";\n\nexport default function Questions({ questions, setQuestions, setQuery }) {\n  const [completedQuestions, setCompletedQuestions] = useState(0);\n  const [answered, setAnswered] = useState(false);\n  const [score, setScore] = useState(0);\n\n  function triviaTime() {\n    if (completedQuestions < questions.length) {\n      return (\n        <Question\n          q={questions[completedQuestions]}\n          setAnswered={setAnswered}\n          setScore={setScore}\n          completedQuestions={completedQuestions}\n        />\n      );\n    }\n    if (completedQuestions === questions.length) {\n      // End of game text changes depending on outcomes.\n      if (score === questions.length) {\n        return (\n          <div className=\"container\">\n            <p className=\"is-flex is-align-items-center is-justify-content-center\">\n              <BiTrophy />\n              &nbsp;100%! Great job! Setup your game to play again!\n            </p>\n          </div>\n        );\n      } else if (score === 0) {\n        return (\n          <div className=\"container\">\n            <p className=\"is-flex is-align-items-center is-justify-content-center\">\n              You lose... your head!&nbsp;\n              <BiGhost />\n              &nbsp;Kidding... Setup your game to play again!\n            </p>\n          </div>\n        );\n      } else {\n        return (\n          <div className=\"container has-text-centered\">\n            <p>Good job! Setup your game to play again!</p>\n          </div>\n        );\n      }\n    }\n  }\n\n  function closeGame(e) {\n    e.preventDefault();\n\n    setQuestions(null);\n    setQuery(\"\");\n  }\n\n  // Sets the completedQuestions, Answered and Score states to their initial state when the question bank is updated.\n  useEffect(() => {\n    setCompletedQuestions(0);\n    setAnswered(false);\n    setScore(0);\n  }, [questions]);\n\n  // Tracks how many questions have been answered.\n  useEffect(() => {\n    answered &&\n      setCompletedQuestions(\n        (previouslyCompletedQuestions) => previouslyCompletedQuestions + 1\n      );\n  }, [answered]);\n\n  return (\n    <section id=\"questions\">\n      <div className=\"container has-text-centered my-5\">\n        <h4 className=\"subtitle is-6\">Current Score</h4>\n        <p className=\"title is-4\">\n          {score} out of {questions.length}\n        </p>\n      </div>\n\n      <div>{triviaTime()}</div>\n\n      <div className=\"has-text-centered mt-5\">\n        <button\n          className=\"button closeGame has-background-danger has-text-white\"\n          onClick={closeGame}\n        >\n          <BiArrowBack size=\"2rem\" color=\"white\" />\n          &nbsp; Return to Setup\n        </button>\n      </div>\n    </section>\n  );\n}\n","import { CloseModal } from \"../utils/ModalFunctions\";\n\nexport default function ResetSessionModal({ resetSessionToken }) {\n    return (\n    <div id=\"resetSession\" className=\"modal\">\n        <div\n          className=\"modal-background\"\n          onClick={(e) => CloseModal(e, \"resetSession\")}\n        ></div>\n        <div className=\"modal-content box content\">\n          <h3 className=\"title\">Resetting Your Game Session Token</h3>\n          <p>\n            The session token of your game keeps track of what questions you have already answered. If you exhaust all of the questions in a category, you can reset your session token (use the button below) OR pick another category.\n          </p>\n          <p>\n              If you've exhausted all of the questions in every category (IMPRESSIVE), you'll need to reset your token with the button below.\n          </p>\n          <p>Your token will expire after 6 hours of inactivity.</p>\n          <div className=\"is-flex is-justify-content-center\">\n            <button\n              className=\"button has-background-danger has-text-white\"\n              onClick={(e) => {\n                if (\n                  window.confirm(\n                    \"Are you sure you want to reset your session token?\"\n                  )\n                ) {\n                  resetSessionToken();\n                  CloseModal(e, \"resetSession\");\n                }\n              }}\n            >\n              Reset Session Token\n            </button>\n          </div>\n        </div>\n        <button\n          className=\"button modal-close\"\n          aria-label=\"close\"\n          onClick={(e) => CloseModal(e, \"resetSession\")}\n        ></button>\n      </div>\n    );\n}","import { AiOutlineInfoCircle } from \"react-icons/ai\";\nimport { OpenModal } from \"../utils/ModalFunctions\";\nimport ResetSessionModal from \"./ResetSessionModal\";\n\nexport default function Footer({resetSessionToken}) {\n  return (\n    <>\n    <footer className=\"footer has-background-black has-text-white has-text-centered pb-6\">\n      <p>\n        Coded by Ayame Ulrich | API{\" \"}\n        <a href=\"https://opentdb.com\" target=\"_blank\" rel=\"noreferrer\">\n          Open Trivia Database\n        </a>\n      </p>\n      <div className=\"is-flex is-justify-content-center mt-2\">\n          <button\n            className=\"buttonLooksLikeLink is-flex is-align-items-center\"\n            onClick={(e) => OpenModal(e, \"resetSession\")}\n          >\n            <AiOutlineInfoCircle className=\"mr-1\" size=\"1rem\" />\n            <p>Reset Session Token</p>\n          </button>\n        </div>\n    </footer>\n    <ResetSessionModal resetSessionToken={resetSessionToken} />\n    </>\n  );\n}\n","import React, { useState, useEffect } from \"react\";\nimport Header from \"./components/Header\";\nimport Search from \"./components/Search\";\nimport QuestionSection from \"./components/QuestionSection\";\nimport Footer from \"./components/Footer\";\n\nexport default function App() {\n  // Setting categories, query, errorMessages and questions state in App to \"lift up state\" from the Search component.\n  // The state variable and setter are then passed down and updated in\n  // the child component, instead of doing everything in the component.\n  const [sessionToken, setSessionToken] = useState();\n  const [player, setPlayer] = useState(\"\");\n  const [categories, setCategories] = useState(\"\");\n  const [query, setQuery] = useState(\"\");\n  const [errorMessage, setErrorMessage] = useState(null);\n  const [questions, setQuestions] = useState(null);\n\n  // Handles the session token.\n  // Retrieves a session token ensures a player is never given\n  // the same question, until they exhaust all questions.\n  // Tokens are deleted after 6 hours of inactivity.\n  function getNewSessionToken() {\n    fetch(\"https://opentdb.com/api_token.php?command=request\")\n      .then((response) => response.json())\n      .then((result) => {\n        if (result.response_code === 0) {\n          setSessionToken(result.token);\n        }\n      });\n  }\n\n  // Resets the Session Token and wipes all past memory.\n  // If a player has answered all questions (overall or in a category),\n  // this resets that data.\n  function resetSessionToken() {\n    fetch(\n      \"https://opentdb.com/api_token.php?command=reset&token=\" + sessionToken\n    )\n      .then((response) => response.json())\n      .then((result) => {\n        if (result.response_code === 0) {\n          setSessionToken(result.token);\n        }\n      });\n  }\n\n  // Gets the error message based on the response code from the API fetch.\n  function getErrorMessage(responseCode) {\n    let errorMessage = \"\";\n\n    switch (responseCode) {\n      case 1:\n        errorMessage =\n          \"No results found. There aren't enough questions in that category.\";\n        break;\n      case 2:\n        errorMessage =\n          \"Not a valid category. Check out the list of category topics.\";\n        break;\n      case 3:\n        errorMessage = \"Session Token Not Found.\";\n        break;\n      case 4:\n        errorMessage =\n          \"Congrats! You've completed all of the questions for your category. Pick another category or reset your session token.\";\n        break;\n      default:\n        errorMessage = \"\";\n        break;\n    }\n    return errorMessage;\n  }\n\n  // Fetches the list of trivia categories to populate the select element.\n  useEffect(() => {\n    fetch(\"https://opentdb.com/api_category.php\")\n      .then((response) => response.json())\n      .then((result) => setCategories(result.trivia_categories));\n  }, []);\n\n  // Fetches a session token on load.\n  useEffect(() => getNewSessionToken(), []);\n\n  // Fetches the questions from the database based on the form inputs.\n  useEffect(() => {\n    const url = \"https://opentdb.com/api.php?\";\n\n    if (query !== \"\") {\n      const URL = url + query + \"&\" + sessionToken;\n      const encodeURL = encodeURI(URL);\n\n      if (sessionToken === \"\") {\n        getNewSessionToken();\n      }\n\n      fetch(encodeURL)\n        .then((response) => response.json())\n        .then((result) => {\n          if (result.response_code === 0) {\n            setQuestions(result);\n          } else {\n            setErrorMessage(getErrorMessage(result.response_code));\n          }\n        });\n    }\n  }, [query]);\n\n  useEffect(() => {\n    document.querySelector(\"#submit\").disabled = errorMessage !== \"\";\n  }, [errorMessage]);\n\n  //console.log(sessionToken);\n  //console.log(categories);\n  //console.log(query);\n  //console.log(errorMessage);\n  //console.log(questions);\n\n  return (\n    <>\n      <Header />\n      <main>\n        {!questions && (\n          <Search\n            player={player}\n            setPlayer={setPlayer}\n            categories={categories}\n            setQuery={setQuery}\n            setErrorMessage={setErrorMessage}\n            getErrorMessage={getErrorMessage}\n          />\n        )}\n        {questions && (\n          <QuestionSection\n            questions={questions.results}\n            setQuestions={setQuestions}\n            setQuery={setQuery}\n          />\n        )}\n        <p>{errorMessage}</p>\n      </main>\n      <Footer resetSessionToken={resetSessionToken} />\n    </>\n  );\n}\n","import { StrictMode } from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\nimport \"bulma\";\nimport \"./styles.css\";\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(\n  <StrictMode>\n    <App />\n  </StrictMode>,\n  rootElement\n);\n"],"sourceRoot":""}